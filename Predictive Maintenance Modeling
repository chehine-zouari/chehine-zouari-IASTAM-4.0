import dash
from dash import dcc, html
import dash.dependencies as dd
import plotly.express as px
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

# Generate mock data for the predictive model
np.random.seed(42)
n_samples = 1000

data = {
    'Conveyor Speed (m/s)': np.random.uniform(3, 5, size=n_samples),
    'Motor Temperature (째C)': np.random.uniform(40, 80, size=n_samples),
    'Vibration Level (mm/s)': np.random.uniform(0.5, 4, size=n_samples),
    'Operational Hours': np.random.uniform(1000, 2000, size=n_samples),
    'Failure Risk (%)': np.random.choice([0, 1], size=n_samples, p=[0.8, 0.2])  # 0: No failure, 1: Failure
}

df = pd.DataFrame(data)

# Splitting data into training and testing sets
X = df[['Conveyor Speed (m/s)', 'Motor Temperature (째C)', 'Vibration Level (mm/s)', 'Operational Hours']]
y = df['Failure Risk (%)']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create Random Forest model for prediction
model = RandomForestClassifier()
model.fit(X_train, y_train)

# Predict on test data and check accuracy
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)

# Create Dash app
app = dash.Dash(__name__)

# Layout for dashboard
app.layout = html.Div(children=[
    html.H1("PredictPro Analytics: Predictive Maintenance Dashboard"),
    html.Div([
        html.H2(f"Model Accuracy: {accuracy * 100:.2f}%"),
    ]),
    html.Div([
        dcc.Dropdown(
            id='feature-dropdown',
            options=[
                {'label': 'Conveyor Speed (m/s)', 'value': 'Conveyor Speed (m/s)'},
                {'label': 'Motor Temperature (째C)', 'value': 'Motor Temperature (째C)'},
                {'label': 'Vibration Level (mm/s)', 'value': 'Vibration Level (mm/s)'},
                {'label': 'Operational Hours', 'value': 'Operational Hours'}
            ],
            value='Conveyor Speed (m/s)',
            clearable=False
        ),
        dcc.Graph(id='feature-importance-chart')
    ])
])


@app.callback(
    dd.Output('feature-importance-chart', 'figure'),
    [dd.Input('feature-dropdown', 'value')]
)
def update_chart(selected_feature):
    # Filter data based on selected feature
    fig = px.histogram(df, x=selected_feature, color='Failure Risk (%)', nbins=50,
                       title=f"Distribution of {selected_feature} by Failure Risk")
    return fig


if __name__ == '__main__':
    app.run_server(debug=True)
